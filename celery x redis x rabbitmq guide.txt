-------------------------------------  УСТАНОВКА ----------------------------------------
*! ЗАПУСКИ КОМАНД НУЖНО ДЕЛАТЬ ИЗ ПАПКИ ПРОЕКТА

1. в локальный venv поставить зависимости: 
pip install celery, django-redis, amqp, flower, django_celery_beat
amqp - брокер сообщений rabbitmq, ставить необязательно, 
т.к. redis может работать как брокер и бэкенд одновременно

в п. 2 приведены настройки для билда: брокер - rabbitmq, бэкенд - redis
брокера можно менять, всего лишь подменив урл брокера и перезапустив celery (см. урлы в настройках)

p.s. flower и celery хз как запустить из докера. но все остальное работает из докера

в папке ПРОЕКТА завести файл celery.py с содержимым:

import os
from celery import Celery

# в обычном проекте нужно также импортировать таски!
# from tasks import test_task

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
celery_app = Celery('project')
celery_app.config_from_object('django.conf:settings', namespace='CELERY')
celery_app.autodiscover_tasks()


1.1. развернуть redis, rabbitmq и celery из docker-compose (есть в docs)

2. настройки файла settings проекта:

# порты смотреть в докере!
REDIS_PORT = 6379
RABBITMQ_PORT = 5672

REDIS_BROKER_URL = f'redis://localhost:{REDIS_PORT}'
RABBITMQ_BROKER_URL = f'amqp://guest:guest@localhost:{RABBITMQ_PORT}' # 'amqp://localhost'

CELERY_BROKER_URL = RABBITMQ_BROKER_URL

# в качестве бэкенда используем redis
CELERY_RESULT_BACKEND = 'redis://' # f'redis://localhost:{REDIS_PORT}'

# настройка redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://localhost:{REDIS_PORT}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    }
}


3. в файле __init__.py в папке ПРОЕКТА прописать код для автозапуска celery:

from .celery import celery_app
__all__ = ('celery_app',)


4. в папке ПРИЛОЖЕНИЯ заводим файл tasks.py и в нем прописываем таски (пример):

from celery import shared_task
import datetime

@shared_task
def test_task():

    with open('tasks_log.txt', 'a') as file:
        file.write(f"task info.. | {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")


5. в терминале из директории (папки) ПРОЕКТА (там где лежит settings, wsgi и т.д.) запустить команду: 
celery -A <имя проекта> worker -l info -P solo
все должно отрабатывать корректно с выводом отладочной информации

-------------------------------------  ИСПОЛЬЗОВАНИЕ ----------------------------------------

6. можно проверить выполнение тасков. например в python-консоли (не в терминале!) выполнить следующие команды:
from <app_name>.tasks import debug_task
debug_task.delay()
в терминале выведется результат типа <AsyncResult: 451d2a0b-5a50-4125-944f-04f4ca8d8613>

* также можно заюзать сервис мониторинга flower. его нужно запустить 
	ПОСЛЕ запуска celery в отдельном терминале командой:
	celery -A <project_name> flower

	после этого по адресу http://localhost:5555 должна отобразиться информация о воркерах и тасках
	
* flower показывает во вкладке брокера урл брокера, так можно определить активного брокера

* по адресу http://localhost:8081 будет доступен redis-commander, там также можно чекать таски

* также по адресу http://localhost:15672 будет доступен веб-интерфейс реббита,
если он используется в качестве брокера

------------------------------------ ВЫПОЛНЕНИЕ ОТЛОЖЕННЫХ ЗАДАЧ -----------------------------------

7. выполнение отложенных задач
ставим библиотеку с планировщиком задач: pip install django_celery_beat
в settings INSTALLED_APPS добавить 'django_celery_beat' и импорты:
from celery.schedules import crontab
from datetime import timedelta

также необходимо добавить расписание запуска:
CELERY_BEAT_SCHEDULE = {
    # имя
    'test_delayed_task_name': {
        # путь к задаче
        'task': 'newsapp.tasks.test_task',
        # кулдаун выполнения (минимальный - 1 минута)
        #'schedule': crontab(minute=1)
        # по секундам можно выполнять с помощью timedelta
        'schedule': timedelta(seconds=3)
    }
}

теперь можно запустить воркер celery, flower и планировщик (beat)
при смене schedule можно перезапускать только планировщик
!* ВОЗМОЖНО НЕ БУДЕТ РАБОТАТЬ ИЗ-ЗА ТОГО, ЧТО НУЖНА МИГРАЦИЯ: python manage.py migrate

---------------------------------
* КОМАНДЫ для django
(параметр debug можно заменить на info и наоборот)

// запуск celery из django приложения
celery -A project worker -l info -P solo

// запуск flower
celery -A project flower

// запуск планировщика выполнения задач
celery -A project beat -l info


* КОМАНДЫ для обычного проекта

// запуск celery из обычного проекта (<путь до объекта celery>.celery_app)
celery -A project.celery_.celery_app worker -l info -P solo

celery -A project.celery_.celery_app project flower

celery -A project.celery_.celery_app beat -l info




