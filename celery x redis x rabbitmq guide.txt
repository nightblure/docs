1. в локальный venv поставить зависимости: pip install celery, django-redis, amqp, flower
amqp - брокер сообщений rabbitmq, ставить необязательно, 
т.к. redis может работать как брокер и бэкенд одновременно

в п. 2 приведены настройки для билда: брокер - rabbitmq, бэкенд - redis
брокера можно менять, всего лишь подменив урл брокера и перезапустив celery (см. урлы в настройках)

p.s. flower и celery хз как запустить из докера. но все остальное работает из докера

в папке ПРОЕКТА завести файл celery.py с содержимым:

import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
celery_app = Celery('project')
celery_app.config_from_object('django.conf:settings', namespace='CELERY')
celery_app.autodiscover_tasks()


1.1. развернуть redis, rabbitmq и celery из docker-compose (есть в docs)

2. настройки файла settings проекта:

# порты смотреть в докере!
REDIS_PORT = 6379
RABBITMQ_PORT = 5672

REDIS_BROKER_URL = f'redis://localhost:{REDIS_PORT}'
RABBITMQ_BROKER_URL = f'amqp://guest:guest@localhost:{RABBITMQ_PORT}' # 'amqp://localhost'

CELERY_BROKER_URL = RABBITMQ_BROKER_URL

# в качестве бэкенда используем redis
CELERY_RESULT_BACKEND = 'redis://' # f'redis://localhost:{REDIS_PORT}'

# настройка redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://localhost:{REDIS_PORT}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    }
}


3. в файле __init__.py в папке ПРОЕКТА прописать код для автозапуска celery:

from .celery import celery_app
__all__ = ('celery_app',)


4. в папке ПРИЛОЖЕНИЯ заводим файл tasks.py и в нем прописываем таски (пример):
from celery import shared_task
@shared_task
def debug_task():
    print('test task')


5. в терминале из директории (папки) ПРОЕКТА (там где лежит settings, wsgi и т.д.) запустить команду: 
celery -A <имя проекта> worker -l DEBUG
все должно отрабатывать корректно с выводом отладочной информации


6. далее можно проверить выполнение тасков. например в папке ПРОЕКТА выполнить следующие команды:
python manage.py shell

from <app_name>.tasks import debug_task
debug_task.delay()
в терминале выведется результат типа <AsyncResult: 451d2a0b-5a50-4125-944f-04f4ca8d8613>

* также можно заюзать сервис мониторинга flower. его нужно запустить 
	ПОСЛЕ запуска celery в отдельном терминале командой:
	celery -A <project_name> flower или просто celery flower

	после этого по адресу http://localhost:5555 должна отобразиться информация о воркерах и тасках
	
* flower показывает во вкладке брокера урл брокера, так можно определить активного брокера

* по адресу http://localhost:8081 будет доступен redis-commander, там также можно чекать таски

* также по адресу http://localhost:15672 будет доступен веб-интерфейс реббита,
если он используется в качестве брокера

