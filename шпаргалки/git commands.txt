------------------------------------------- ВЕТКИ -------------------------------------------------

* origin - алиас удаленного репозитория

// связь с удаленным репозиторием
git remote add origin url

// просмотр локальных веток (с флагом -a и удаленных веток)
git branch [-a]

// отправить изменения в удаленную ветку master и установить связь (флаг -u (апстрим))
// или создать ветку удаленно, если ее нет, и связать
// после установления связи можно пушить и пуллить короткими командами git push и git pull)
git push -u origin master

// получить в текущей ветке новые изменения из удаленной ветки master 
git pull origin master

// удалить локальную ветку branch
git branch -d branch

// удалить remote ветку branch
git push origin --delete branch
git push origin :branch

// создать локальную ветку mybranch и переключиться на нее
git checkout -b mybranch

// смержить ветку branch с текущей веткой (2 способа: merge и rebase. рассмотрим пример слияния с мастером)
  * merge делает коммит слияния, сохраняя историю как есть: соседняя ветка с фичей остается
  * rebase делает историю линейной: ветка с фичей исчезает. коммиты, связанные с фичей, перемещаются в конец мастер-ветки

git checkout <target_merge_branch>
git merge OR rebase <from_branch>

// переименовать текущую ветку локально 
git branch -m new-name

// переименовать ветку из любого места локально 
git branch -m old-name new-name

// переименовать удаленную ветку
1. переименовать ветку локально
2. удалить remote ветку со старым именем
3. пуш локальной ветки с новым именем

------------------------------------------- ОБЩИЕ КОМАНДЫ ------------------------------------------------

// история коммитов
git log

общий порядок действий:
	// внести изменения в индекс, трекать все файлы/занести в working directory
	git add .

	// коммит
	git commit -m "message"
	
	// отправка локальных изменений в удаленный репозиторий
	git push


// КОММИТ ОДНОЙ КОМАНДОЙ
git commit -am "message"

// удаление файла локально (если нужно и удаленно, то необходимо сделать commit и push)
git rm file.txt

// отмена последнего (или N коммитов)
git revert HEAD # HEAD~3 — вернуть состояние на 4 дейстия назад

// удобный просмотр истории
git log --oneline --graph

// отмена локальных незакоммиченных изменений
git checkout .

------------------------------------------- ОТКАТЫ и т.д.------------------------------------------------

// откат к коммиту без потери истории (команда создаст новый коммит)
git revert [commit hash]

// отмена локальных незакоммиченных изменений в файле
git checkout -- [имя файла]

// отмена всех локальных незакоммиченных изменений
git checkout

// GIT RESET (ПРИМЕНЯТЬ ТОЛЬКО В СЛУЧАЕ, ЕСЛИ ДАННЫЕ НЕ ЗАПУШЕНЫ В ORIGIN!)
рассмотрим ветку - A - B - C (master). HEAD указывает на C и индекс совпадает с С

    общий вид команды: git reset --flag [hash]

    1. переключить HEAD на B, последние изменения не отслеживаются (untracked)
	git reset B (эквивалентно git reset --mixed)

    2. переключить HEAD на B, последние изменения отслеживаются (staged)
	git reset --soft B

    3. переключить HEAD на B и уничтожить последние изменения
	git reset --hard B


// исправить опечатку в последнем коммите вместо создания нового коммита при условии, что изменения не запушены в origin!
git commit --amend

// перенос коммита в текущую ветку
git cherry-pick [hash]
  * если хочется поменять commit-message: git cherry-pick [hash] -edit
  * взять изменения и начать отслеживать для доработок перед новым коммитом: git cherry-pick [hash] --no-commit
